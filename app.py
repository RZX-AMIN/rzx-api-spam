from flask import Flask, request, jsonify
import asyncio
import httpx
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
import threading
import time

app = Flask(__name__)

# توكنات الحسابات
SPAM_TOKENS = {
    "3800752475": "5AE95FCF90F86F4253B396EEDF7FE1C86E753C4C4042012CE75EF7B65BCF0DD8",
    "3800840337": "77FF6084666CBFC109D01AEA7C855D54C7CA56C467382CDBB18B221909C9FB37",
    "3800957248": "8BD64B768A502DF2CAA98B500F8F52981C09629AF5588BDF558671686F342B51",
    "3801102908": "693D2F66B93FDDAD4AE88A996B7362B36B7DCB664B51A78AA748586639C629AB",
    "3801112619": "0E4A03EBC68B0EAB804083D354276D08D5103B2607E939D4BCC35DF68477545B",
    "3801120700": "A48F724267B2D95E41D9EB922ADBC2B93ED36436FA55A376E65FC2997E351B93",
    "3801198858": "7B080903885430A11263878376FC0F007691A410271A449BB9A556804D941D55",
    "3801208980": "C346B8EB3FBAE470ECC2990507610D2357D658D76BABAF9A6EE7BA837CC768FE",
    "3801217973": "8A299A10E3DAA0DE56C238C45E889B376E11A923D726955B7BBF6F4174D21FC7",
    "3801228232": "22FC6416793F625F5854D40C3DA2BBDE1D9E5B759723CCA060C8D14F33F1F0A0",
    "3801237417": "8CF2320A9396DBFF3D28BDB22EEB65D458F60825D680AC5FF06CE3EF223F0215",
    "3801248542": "6E43B6D82B8CBB45CB5DFB9D9074166F00C264C42058AB902B200A1838CD9643",
    "3801258622": "DDA5F914A1A0CDFCD85FD300886CC4C24B1876678E4BFEDE7EF3F6C0B7C1F578",
    "3801266986": "AB78E8BD0F698F93C198C47A61BB8BE2F60FA037F3AEA437AE5E4A75EDE99FF1",
    "3801275565": "99701BC699B18419658445EDC669B7C8014CEF76FEB54FAAADE96490142C5F61",
    "3801284191": "942902E9B33DDCE32F279CA57D6839DC789022DD2A156AD19BE70B5698751B0E",
    "3801292996": "23592470AE201BD8D1138911779622A113002B975AB95A98CD4479277F47A6B0",
    "3801508369": "93BAE9C89C770C72E372744D16CC66533CA30287F3DB46AB887951B2D925D9AD",
    "3801517529": "265C6213FB2DA9601413D7B3C4E3055185238764F9A9A67E023A5010361E1A49",
    "3801528385": "62227FD2EA5989CB4278BF0E150BD2E39157906129DEC776765BAD1E84EBF78A",
    "3802576258": "C0753720EB5E86C575D0E46108622D92EA4F6ABE01C5F17D8B35C2B951277CDD",
    "3802588477": "5FD5094E77F14C294DA44545A90C7EEDE5BAAB07003A2255D8AB36F26B185CFB",
    "3802627043": "3F1ACD37B15ABBCF9B7CCA5C56FF974B6224954C3D494C9CADF742D1080505D7",
    "3802639912": "E962361B52472FFBE6EAAB8739F2B0979A11112861973ABDDBB47770281E35C5",
    "3802653443": "5798E4C5214ACA816BFF2A9A53E2E621752956BC40C0D5CC72D910805128E847",
    "3802666034": "8793CFC1E60858BC617F9039695EB2BA6A04AA79F6CD2A39452C22C178A25369",
    "3802713767": "4AD1697DCBA866A3FBBEA34AB48214C8CBB3BE7EE38AD7857A8D45964358BCA2",
    "3802905592": "AB65C43335E72B9F5D64C2E585242B1E716D0481576D7E239C5A57D33D7A30FA",
    "3802921125": "366A1B0C0A19AB72365E76840CA94FCB1E379460FCA92273BA576473D44EA75D",
    "3802941800": "BBCD682619F0950332230C137B49263217F324C0DC39420DFE235191BF352211",
    "3802964699": "B24857AD3ADFDA9AB3AD8D6C5FE68246C1FDAC0F88299978C76C92E7C3EAE644",
    "3802995192": "632970B47F2A00E13DAF8E86287707C853B695B861AFCC2764E382E376559FD2",
    "3803033652": "A6E65C8EBCDBF129F9CE66A91BC5FE720DA8708AB58025347451F576B0FE4B9A",
    "3803039611": "D519F6575700CA833E8A0199FF5C15A0CE243E32E46482FC0AAE4EF8A231F145",
    "3803053509": "44FB45939D1B4FD29720BF0D9AD240E55D9BB77ED185E685BF69FE946E6326C0",
    "3803060282": "9601944A23CA8D5F313495BE4E714D89CF4F40CC8A616FDBF69D95126EE886CE",
    "3803068564": "9637E48B4CC58662DEF714CE8359E47F48AF4F7E30076905972251C63456C95A",
    "3803073338": "43C4A6575101B4A97F489E8BE5ECED5801C9670571F44ADD3E1AD4CEB5800AE1",
    "3803085871": "F82B1997D70D9E44A5C20E1C7C8C3F5E85258CD486D1FE5BFA83CCC0A833364A",
    "3803089984": "D86A4BAB77A203EDE98A28C3A0976089F8025F3010B15A4F6A1BBA576C950CBA",
    "3813467410": "E3836ED05E233A916D5DBCD19E9ABA4610332E78369173E1D8A42FE235F1C4FC",
    "3820304405": "EA19D67B0F85002F69A76711454D1C9DAA2BD196532A81FA65A9C45E130296FC",
    "3820321651": "6A045CA0E9BCFB73F0A355B2D1F61AC1B779D68986BF8EE566AC837F810AD37C",
    "3820339635": "4C423A454F6D40C0168CD59E9D7DA5640A3C5E0CE8BE6FEA02969829F687CEEF",
    "3820368243": "FDFEEBBEE7BEAB0B85F4EF2F4B08CEA7F23D242B8AA4D3B48D86963E2516A197",
    "3820393480": "6201BC0698397693CCA14CE3F104EB578425C1F81533F7965F8563A90553555A",
    "3820412785": "13D7242E09B85A28AB9D74A114FA8EA1168D9B618B28E4CE30892E94D4365612",
    "3820433954": "3D9B495DFEB2631868697E35885AB2FD38EC96FBF6FE91FAEF8D1E5293F33A12",
    "3820506007": "915F091D65E6C097B4E92C61652994D8271844D6C30AFDD6C95BAD46F603EAD8",
    "3820524068": "D0E4FC67BA085F6F654FD9348CEE55C9BE7C030AE2CF03489121725E68781DA9",
    "3803903050": "431653F3F4CC9795F2AFA86B9A9243A28BE2F169CE30642A4B62170C3CCE000A",
    "3803914591": "A55D4E8BEA13874918EDF85D437EA2A17AF8456CCC91D145CA823B43B8F54CB9",
    "3803921047": "5A1702EEA3016F44347CFB881FD219F1389E8A7A3205490DCC4C00B5DA188C4B",
    "3803925486": "54F90D7E2B75249354EED50EEDF61F10F9D8B278283A3B7A89924EBE53565F46",
    "3803929157": "6FB9F3808BD70E7C8AF6DADD1CA24C29373F8739B57341D7FAF705402DEC0744",
    "3803946665": "F89CCA8C4316B61879A3147D030B2F601090B25CB0F1BDE7AD85A2AE235E518C",
    "3803952737": "A2FF77000BAA81BDEA9BF54630B496E94CF0699B696A04A7EF76734375F708DA",
    "3803956347": "2D3C6B84D618E829475AC5112176531D6939F728C3050D61141EECED00AA8BB0",
    "3803960513": "151E3D75572A304E343821FB9FE1D835D63DC2D5F74801536A9D651F593080D3",
    "3803964657": "1F436986A525B54E0AF6D4C1181FA32FE3C7D7E42361CB7DC757AE2111F483F0",
    "3804109999": "DA8952AC34A2D298FA549D8803BD355C5777A3FBD7BEFCE7E3158BF6E1822D6C",
    "3804113695": "26D2BE25D4C129DF2367A22C0F516E6BABDE8DA89B9DC550D3A57F14D6F0827D",
    "3804118330": "45A0F5F6506A59EEA29D73C8F5B1E66FAD770E2F66F02C4E93CA850CAA866EE4",
    "3804121686": "331BA00F6140399DA0A4F46E8CB1E363BE8CCF750E13E497988219EC07A0CD55",
    "3804124914": "B0A2464CE13CF444E71D1DF1AB24A69E79DDA9918007FFA2CDA160A7686B2404",
    "3804128192": "3625BBBA50E1958F62842D41C2E1B8B3C1561647A308404FC68A43B17F783543",
    "3804131447": "BD09820951307EDF6A572BA47744083CBFD28D470E67017776E2B5FFC724AD56",
    "3804134487": "0A3916C54F2C2DDD166656AA8739AFC9E52021D4E7A07F8A6682BC0E4700564B",
    "3804138057": "B60BFDB9CD340680EAE55F4CDECC1A50AC5AD4E492DAB38095453BE3792D5886",
    "3804141606": "3F00EA5116DE781EE8984935FC4E914A8630AECF0566B68E33C4FADEA2606896",
    "3805064145": "8AAD44CA8FF5A42F5690723212BDB1E9B90B5BD0CBB65C3B52B49F11F3A44172",
    "3805066482": "7804B542C41D07CFC1E1A52280FBC6F1EAF9A7C71CF5C7AD2A9B019594EB5AE1",
    "3805068471": "3D60894CDD323304133B8253E3787833D375822FD70ABD310499E346E4678B0A",
    "3805070688": "4D238B1C3BD5B6FB7DB0D08690AA1EB7D01DEBF6A703917EE3E80E174DC2CFB7",
    "3805073602": "7EF819AA00E50AFB9E72DEA067054E987FA8BC1BBE8D661CEA025A709018B73C"
}

# تعريف دالة Encrypt_ID
def Encrypt_ID(x):
    x = int(x)
    dec = ['80','81','82','83','84','85','86','87','88','89','8a','8b','8c','8d','8e','8f',
           '90','91','92','93','94','95','96','97','98','99','9a','9b','9c','9d','9e','9f',
           'a0','a1','a2','a3','a4','a5','a6','a7','a8','a9','aa','ab','ac','ad','ae','af',
           'b0','b1','b2','b3','b4','b5','b6','b7','b8','b9','ba','bb','bc','bd','be','bf',
           'c0','c1','c2','c3','c4','c5','c6','c7','c8','c9','ca','cb','cc','cd','ce','cf',
           'd0','d1','d2','d3','d4','d5','d6','d7','d8','d9','da','db','dc','dd','de','df',
           'e0','e1','e2','e3','e4','e5','e6','e7','e8','e9','ea','eb','ec','ed','ee','ef',
           'f0','f1','f2','f3','f4','f5','f6','f7','f8','f9','fa','fb','fc','fd','fe','ff']
    xxx = ['1','01','02','03','04','05','06','07','08','09','0a','0b','0c','0d','0e','0f',
           '10','11','12','13','14','15','16','17','18','19','1a','1b','1c','1d','1e','1f',
           '20','21','22','23','24','25','26','27','28','29','2a','2b','2c','2d','2e','2f',
           '30','31','32','33','34','35','36','37','38','39','3a','3b','3c','3d','3e','3f',
           '40','41','42','43','44','45','46','47','48','49','4a','4b','4c','4d','4e','4f',
           '50','51','52','53','54','55','56','57','58','59','5a','5b','5c','5d','5e','5f',
           '60','61','62','63','64','65','66','67','68','69','6a','6b','6c','6d','6e','6f',
           '70','71','72','73','74','75','76','77','78','79','7a','7b','7c','7d','7e','7f']
    x = x / 128
    if x > 128:
        x = x / 128
        if x > 128:
            x = x / 128
            if x > 128:
                x = x / 128
                strx = int(x)
                y = (x - int(strx)) * 128
                stry = str(int(y))
                z = (y - int(stry)) * 128
                strz = str(int(z))
                n = (z - int(strz)) * 128
                strn = str(int(n))
                m = (n - int(strn)) * 128
                return dec[int(m)] + dec[int(n)] + dec[int(z)] + dec[int(y)] + xxx[int(x)]
            else:
                strx = int(x)
                y = (x - int(strx)) * 128
                stry = str(int(y))
                z = (y - int(stry)) * 128
                strz = str(int(z))
                n = (z - int(strz)) * 128
                strn = str(int(n))
                return dec[int(n)] + dec[int(z)] + dec[int(y)] + xxx[int(x)]

# وظيفة التشفير
def encrypt_api(plain_text):
    key = bytes([89, 103, 38, 116, 99, 37, 68, 69, 117, 104, 54, 37, 90, 99, 94, 56])
    iv = bytes([54, 111, 121, 90, 68, 114, 50, 50, 69, 51, 121, 99, 104, 106, 77, 37])
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return cipher.encrypt(pad(bytes.fromhex(plain_text), AES.block_size)).hex()

# جلب التوكن
async def get_jwt_async(uid, password):
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"https://jwt-gen-api-v2.onrender.com/token?uid={uid}&password={password}",
                timeout=30
            )
            if response.status_code == 200:
                return response.json().get("token")
    except:
        return None

# إرسال طلب الصداقة
async def send_friend_request(id, token):
    url = 'https://clientbp.common.ggbluefox.com/RequestAddingFriend'
    headers = {
        'X-Unity-Version': '2018.4.11f1',
        'ReleaseVersion': 'OB50',
        'Content-Type': 'application/x-www-form-urlencoded',
        'X-GA': 'v1 1',
        'Authorization': f'Bearer {token}',
        'Content-Length': '16',
        'User-Agent': 'Dalvik/2.1.0 (Linux; U; Android 7.1.2)',
        'Host': 'clientbp.ggblueshark.com',
        'Connection': 'Keep-Alive',
        'Accept-Encoding': 'gzip'
    }
    encrypted_data = encrypt_api(f'08a7c4839f1e10{Encrypt_ID(id)}1801')
    data = bytes.fromhex(encrypted_data)

    try:
        async with httpx.AsyncClient(verify=False, timeout=60) as client:
            response = await client.post(url, headers=headers, data=data)
            if response.status_code == 200:
                return f"تم الإرسال لـ {id}"
            return f"خطأ: {response.text}"
    except Exception as e:
        return f"فشل: {str(e)}"

# العملية الرئيسية
async def process_account(uid, pw, id):
    token = await get_jwt_async(uid, pw)
    if token:
        return await send_friend_request(id, token)
    return f"فشل جلب التوكن لـ {uid}"

async def process_all_accounts(id):
    tasks = []
    for uid, pw in SPAM_TOKENS.items():
        task = asyncio.create_task(process_account(uid, pw, id))
        tasks.append(task)
    return await asyncio.gather(*tasks)

def run_async(id):
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    results = loop.run_until_complete(process_all_accounts(id))
    loop.close()
    print("النتائج:", results)

@app.route('/spam')
def spam():
    id = request.args.get('id')
    if id:
        thread = threading.Thread(target=run_async, args=(id,))
        thread.start()
        time.sleep(3)  # الانتظار 3 ثواني قبل الرد
        return jsonify({"message": f"تم بدء إرسال طلبات الصداقة إلى اللاعب: {id}"})
    return jsonify({"error": "ايدي لاعب خطأ"})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8398)
